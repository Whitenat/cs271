// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in = load, sel[0]=address[0], sel[1]=address[1], sel[2]= address[2],a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);

    RAM8(in = in, load = a, address[0] = address[3], address[1] = address[4], address[2] = address[5], out = aOut);
    RAM8(in = in, load = b, address[0] = address[3], address[1] = address[4], address[2] = address[5], out = bOut);
    RAM8(in = in, load = c, address[0] = address[3], address[1] = address[4], address[2] = address[5], out = cOut);
    RAM8(in = in, load = d, address[0] = address[3], address[1] = address[4], address[2] = address[5], out = dOut);
    RAM8(in = in, load = e, address[0] = address[3], address[1] = address[4], address[2] = address[5], out = eOut);
    RAM8(in = in, load = f, address[0] = address[3], address[1] = address[4], address[2] = address[5], out = fOut);
    RAM8(in = in, load = g, address[0] = address[3], address[1] = address[4], address[2] = address[5], out = gOut);
    RAM8(in = in, load = h, address[0] = address[3], address[1] = address[4], address[2] = address[5], out = hOut);
    
    Mux8Way16(a=aOut, b=bOut, c=cOut, d=dOut, e=eOut, f=fOut, g=gOut, h=hOut, sel[0]=address[0], sel[1]=address[1], sel[2]= address[2], out =out);
}